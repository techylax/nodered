The Node Red Dashboard Automation Tool is a robust Python-based desktop application designed to streamline the process of automating tasks related to Node-RED dashboard JSON files. By providing a user-friendly graphical interface, it empowers users to efficiently import, manipulate, and save JSON data for their Node-RED dashboards. Here's a more detailed description of the tool:

**Installation Requirements:**
Before using the Node Red Dashboard Automation Tool, ensure the following components are in place:

1. **Python:** The tool hinges on Python, so it's crucial to have Python installed on your machine. You can download the latest Python version from the official website: https://www.python.org/downloads/

2. **PyQt5:** The tool leverages the PyQt5 library to craft its graphical user interface. PyQt5 can be effortlessly installed using pip. Just run the following command in your command prompt or terminal: `pip install pyqt5`

**Program Workflow:**

**1. Launch the Application:**
After successfully installing the necessary prerequisites, execute the Python script associated with the tool to launch the application.

**2. GUI Layout:**
Upon launching, the application window titled "Node Red Dashboard Automation" comes into view. The window comprises several key components:

- **Large Text Area (QTextEdit):** This space is employed for either pasting the JSON content or visualizing the modified JSON data.

- **Input Fields (QLineEdit):** Two input fields, labeled "Find" and "Replace," are present. These fields facilitate the specification of text to be located and replaced within the JSON data.

- **Buttons (QPushButton):** Three buttons, namely "Import JSON," "Perform Automation," and "Save JSON," feature prominently. Each button corresponds to specific actions.

**3. Import JSON:**
By clicking the "Import JSON" button, a file dialog opens, enabling the selection of the target JSON file. Subsequently, the content of the selected JSON file is displayed within the large text area.

**4. Perform Automation:**
After importing the JSON, the "Find" and "Replace" input fields come into play. Users input the text they want to find and its replacement in these fields. Clicking on the "Perform Automation" button initiates the automation process, encompassing the following actions:

- Replacing occurrences of "ui_tab" IDs with "1" across the JSON.
- Updating instances of "tab" IDs to "100" throughout the JSON.
- Substituting "ui_group" IDs with "1+i" (where "i" represents an incremental number) across the JSON.
- Locating and substituting "branch plant" values with user-specified text.
- Additionally, the tool performs a general find-and-replace operation on the JSON content based on the user-specified "Find" and "Replace" text. The modified JSON content is then showcased within the text area.

**5. Save JSON:**
Upon satisfaction with the modifications, users can save the adjusted JSON by clicking the "Save JSON" button. This action triggers a file dialog, granting users the ability to specify the destination file path for the modified JSON data.

**Notes:**

- The application's utilization of PyQt5 empowers seamless interaction and engagement with the tool.
- Caution is advised when engaging in automation, as improper usage may lead to unexpected alterations in the JSON structure.
- A best practice is to create backups of the original JSON files prior to employing any modifications using this tool. This ensures data safety and mitigates the risk of unintended changes.